import azure.functions as func
import json
import requests
import logging
import io
import os
from triage import Client

app = func.FunctionApp(auth_level=func.AuthLevel.ANONYMOUS)

# Learn more at aka.ms/pythonprogrammingmodel

# Get started by running the following code to create a function using a HTTP trigger.

@app.function_name(name="api")
@app.route(route="api/submitSample")
def submit_sample(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')

    url = os.getenv("SANDBOX_API_URL")
    if not url:
        return func.HttpResponse(
            "{\"error_msg\": \"Sandbox API URL not configured in application settings\"}",
            status_code=500
        )
    token = os.getenv("SANDBOX_API_KEY")
    if not token:
        return func.HttpResponse(
            "{\"error_msg\": \"Sandbox API key unable to be retrieved from application settings.\"}",
            status_code=500
        )
    c = Client(token, root_url=url)
    json_content = json.loads(json.loads(req.form['json']))
    submitter = json_content['submitter']
    response = []
    input_files = req.files.values()
    for f in input_files:
        filename = f.filename
        #if not filename:
        #    return func.HttpResponse(
        #        "{\"error_msg\": \"No filename received.\"}",
        #        status_code=500
        #    )
        try:
            file = f.stream.read()
            if 'password' in json_content:
                r = c.submit_sample_file(filename, io.BytesIO(file))
            else:
                r = c.submit_sample_file(filename, io.BytesIO(file), password=json_content['password'])
            logging.info(f'Response {json.dumps(r)} received from API.')
            response.append({'Uploaded': True, 'FileName': r["filename"], 'SubmissionId': r["id"], 'SubmissionTime': r["submitted"]})
        #except ServerError as e:
        #    errstring = str(e)
        #    return func.HttpResponse(
        #        f"{{\"error_msg\": \"{errstring}\"}}",
        #        status_code=500
        #    )
        except Exception as e:
            logging.error(f'Exception {e} returned.')
            return func.HttpResponse(
                "{\"error_msg\": \"Unexpected exception occurred submitting sample.\"}",
                status_code=500
            )
    response_json = json.dumps(response)
    teams_url = os.getenv("TEAMS_WEBHOOK_URL")
    if not teams_url:
        logging.error("Unable to send teams notification.")
    notification = {'@context': "https://schema.org/extensions", '@type': "MessageCard", 'text': json.dumps({'Submitter': submitter, 'API Response': response_json})}
    if teams_url:
        tr = requests.post(url = teams_url, data = json.dumps(notification))
        logging.info(f"Teams response: {tr}")
    return func.HttpResponse(
                response_json,
                mimetype="application/json",
                status_code=200
            )
